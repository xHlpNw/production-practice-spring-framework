package com.example.production_practice;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

/*
Необходимо создать следующие классы:
Сущности
●	Класс для посетителей ресторана с полями id (типа Long), имя, возраст, пол.
	Имя должно быть не обязательным (отзыв о ресторане можно оставить анонимно), всё остальное - обязательно.
●	Класс для ресторана с полями id (типа Long), название, описание (может быть пустым),
	тип кухни (сделать перечисление с типами “Европейская”, “Итальянская”, “Китайская”, и т.д.),
	средний чек на человека, оценка пользователей (типа BigDecimal).
●	Класс с оценками посетителей с полями id посетителя, id ресторана, оценка (int), текст отзыва (может быть пустым).

Слой работы с данными (репозитории).
В каждом классе хранить данные в приватном финальном поле типа List, все методы работают именно с этим полем.
●	Класс для работы с данными о посетителях, методы: save, remove, findAll.То есть класс, который сохраняет
	нового посетителя в наш список, удаляет оттуда его и находит все записи, остальные классы аналогично.
●	Класс для работы с данными о ресторанах, методы: save, remove, findAll
●	Класс для работы с данными об оценках, методы: save, remove, findAll, findById

Слой бизнес логики (сервисы). В каждый класс внедрить соответствующий(-ие) репозиторий(-ии).
●	Класс для работы с данными о посетителях, методы: save, remove, findAll
●	Класс для работы с данными о ресторанах, методы: save, remove, findAll
●	Класс для работы с данными об оценках, методы: save, remove, findAll
Не забудьте, что после добавления оценки и сохранения её необходимо пересчитать среднюю оценку ресторана.

Протестируйте реализованную логику. Для этого нужно добавить несколько посетителей, несколько ресторанов и оценки.
Все данные можно добавить путем использования конструкции @PostConstruct. Работоспособность сервисов можно
протестировать несколькими способами: получить объект контекста в main методе (SpringApplication.run() его возвращает)
и дальше поработать получив бины через context.getBean либо реализовать класс, наследующий CommandLineRunner,
переопределить метод run и в нем протестировать созданное приложение (это будет плюсом к вашей работе).

Доп. сложности:
●	Все поля классов, кроме слоя с сущностями, должны быть private final
●	Минимум boilerplate-кода за счет использования lombok
●	Разобрать все файлы по пакетам, чтобы было легко понять что за что отвечает.
	Поставить аннотации @Service и @Repository там где им место вместо аннотации @Component
*/



@SpringBootApplication
public class ProductionPracticeApplication {

	public static void main(String[] args) {
		SpringApplication.run(ProductionPracticeApplication.class, args);
	}

}
